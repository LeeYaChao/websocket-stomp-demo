<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.2.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-4.2.xsd" default-lazy-init="true">

    <!-- 引用外部配置文件 -->
    <bean id="propertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:druid.properties</value>
            </list>
        </property>
    </bean>

    <!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"-->
          <!--init-method="init" destroy-method="close">-->
        <!--&lt;!&ndash; 基本属性 url、user、password &ndash;&gt;-->
        <!--<property name="url" value="${url}" />-->
        <!--<property name="username" value="${username}" />-->
        <!--<property name="password" value="${password}" />-->

        <!--&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;-->
        <!--<property name="initialSize" value="${initialSize}" />-->
        <!--<property name="minIdle" value="${minIdle}" />-->
        <!--<property name="maxActive" value="${maxActive}" />-->

        <!--&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="${maxWait}" />-->

        <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />-->

        <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />-->

        <!--<property name="validationQuery" value="${validationQuery}" />-->
        <!--<property name="testWhileIdle" value="${testWhileIdle}" />-->
        <!--<property name="testOnBorrow" value="${testOnBorrow}" />-->
        <!--<property name="testOnReturn" value="${testOnReturn}" />-->

        <!--&lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;-->
        <!--<property name="poolPreparedStatements" value="${poolPreparedStatements}" />-->
        <!--<property name="maxPoolPreparedStatementPerConnectionSize"-->
                  <!--value="${maxPoolPreparedStatementPerConnectionSize}" />-->

        <!--&lt;!&ndash; 配置监控统计拦截的filters &ndash;&gt;-->
        <!--<property name="filters" value="${filters}" />-->

        <!--&lt;!&ndash;-->
        <!--<property name="proxyFilters">-->
            <!--<list>-->
                <!--<ref bean="stat-filter" />-->
                <!--<ref bean="log-filter" />-->
            <!--</list>-->
        <!--</property>-->
         <!--&ndash;&gt;-->
        <!--<property name="timeBetweenLogStatsMillis" value="${timeBetweenLogStatsMillis}" />-->
    <!--</bean>-->

    <!--&lt;!&ndash; log4jdbc &ndash;&gt;-->
    <!--<bean id="log4jdbcInterceptor" class="net.sf.log4jdbc.DataSourceSpyInterceptor" />-->
    <!--<bean id="dataSourceLog4jdbcAutoProxyCreator"-->
          <!--class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">-->
        <!--<property name="interceptorNames">-->
            <!--<list>-->
                <!--<value>log4jdbcInterceptor</value>-->
            <!--</list>-->
        <!--</property>-->
        <!--<property name="beanNames">-->
            <!--<list>-->
                <!--<value>dataSource</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!--&lt;!&ndash; Hibernate配置 &ndash;&gt;-->
    <!--<bean id="sessionFactory"-->
        <!--class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">-->
        <!--<property name="dataSource" ref="dataSource" />-->
        <!--<property name="physicalNamingStrategy">-->
            <!--<bean class="com.taiji.frame.hibernate5.config.ImprovedNamingStrategy" />-->
        <!--</property>-->
        <!--<property name="hibernateProperties">-->
            <!--<props>-->
                <!--&lt;!&ndash;<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>&ndash;&gt;-->
                <!--<prop key="hibernate.dialect">${hibernate.dialect}</prop>-->
                <!--<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>-->
                <!--<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>-->
                <!--&lt;!&ndash; 分页是必须带的 &ndash;&gt;-->
                <!--<prop key="hibernate.jdbc.use_scrollable_resultset">${hibernate.jdbc.use_scrollable_resultset}</prop>-->
                <!--&lt;!&ndash;-->
                <!--<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>-->
                <!--&ndash;&gt;-->
                <!--&lt;!&ndash; 解决Disabling contextual LOB creation as connection was null Hibernate问题&ndash;&gt;-->
                <!--<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>-->
            <!--</props>-->
        <!--</property>-->
        <!--&lt;!&ndash; jpa扫描model类的目录 &ndash;&gt;-->
        <!--<property name="packagesToScan">-->
            <!--<list>-->
                <!--<value>com.taiji.frame.model</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
    <context:component-scan base-package="com.taiji.frame" />
    <context:component-scan base-package="com.taiji.websocket" />

    <!-- 事务管理器配置,单数据源事务 -->
    <!--<bean id="transactionManager"-->
        <!--class="org.springframework.orm.hibernate5.HibernateTransactionManager">-->
        <!--<property name="sessionFactory" ref="sessionFactory" />-->
    <!--</bean>-->

    <!-- 使用annotation定义事务 -->
    <!--<tx:annotation-driven transaction-manager="transactionManager"-->
        <!--proxy-target-class="true" />-->
    <!-- 使用AOP，用于审计功能 <tx:annotation-driven transaction-manager="transactionManager"
        proxy-target-class="true"/> -->
    <!-- 现在只在Dept类中做了实验，包括code, name, deptType.codeDesc。现在只有新增和编辑带日志记录功能，删除日志功能待开发 -->
    <!-- 特别注意：为了实现日志功能ExecuteDAO中的public <X> X get(final Class entityClass,
        final Long id)方法，以及 -->
    <!-- SecurityService中的getCurUser()必须加上只读事务的控制 -->
    <!-- ExecuteDAO中要使用getWithStatelessSession方法通过ID获取被对比数据 -->
    <!-- 打开以下内容，并在etms-web的pom.xml文件中引用etms-log子项目，即可开启日志功能 -->
    <!-- <aop:aspectj-autoproxy/> -->
    <!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->

    <import resource="applicationContext-quartz.xml"/>
</beans>